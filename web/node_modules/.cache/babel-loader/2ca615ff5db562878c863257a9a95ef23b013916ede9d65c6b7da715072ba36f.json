{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAW46VWD_-9HYAwf4wMe_JvZ8Z1n-I3_fA\",\n  authDomain: \"edurpg-f00ec.firebaseapp.com\",\n  databaseURL: \"https://edurpg-f00ec-default-rtdb.firebaseio.com\",\n  projectId: \"edurpg-f00ec\",\n  storageBucket: \"edurpg-f00ec.firebasestorage.app\",\n  messagingSenderId: \"783480475245\",\n  appId: \"1:783480475245:web:4583ddc1f2bdee4e01b964\",\n  measurementId: \"G-818B5F28ST\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\n// Initialize Firebase Authentication\nconst auth = getAuth(app);\n// Initialize Firestore\nconst db = getFirestore(app);\nexport { auth };\nexport { db };\n\n// Firestore question management\n\n// Add a question to Firestore\nexport async function addQuestion(question) {\n  try {\n    const docRef = await addDoc(collection(db, \"questions\"), question);\n    return docRef.id;\n  } catch (e) {\n    console.error(\"Error adding question: \", e);\n    return null;\n  }\n}\n\n// Get all questions from Firestore\nexport async function getAllQuestions() {\n  try {\n    const querySnapshot = await getDocs(collection(db, \"questions\"));\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (e) {\n    console.error(\"Error fetching questions: \", e);\n    return [];\n  }\n}\nexport default app;","map":{"version":3,"names":["initializeApp","getAnalytics","getAuth","getFirestore","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","auth","db","addQuestion","question","docRef","addDoc","collection","id","e","console","error","getAllQuestions","querySnapshot","getDocs","docs","map","doc","data"],"sources":["C:/Users/hp/Desktop/New folder/web/src/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAW46VWD_-9HYAwf4wMe_JvZ8Z1n-I3_fA\",\r\n  authDomain: \"edurpg-f00ec.firebaseapp.com\",\r\n  databaseURL: \"https://edurpg-f00ec-default-rtdb.firebaseio.com\",\r\n  projectId: \"edurpg-f00ec\",\r\n  storageBucket: \"edurpg-f00ec.firebasestorage.app\",\r\n  messagingSenderId: \"783480475245\",\r\n  appId: \"1:783480475245:web:4583ddc1f2bdee4e01b964\",\r\n  measurementId: \"G-818B5F28ST\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\n// Initialize Firebase Authentication\r\nconst auth = getAuth(app);\r\n// Initialize Firestore\r\nconst db = getFirestore(app);\r\n\r\nexport { auth };\r\nexport { db };\r\n\r\n// Firestore question management\r\n\r\n// Add a question to Firestore\r\nexport async function addQuestion(question) {\r\n  try {\r\n    const docRef = await addDoc(collection(db, \"questions\"), question);\r\n    return docRef.id;\r\n  } catch (e) {\r\n    console.error(\"Error adding question: \", e);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Get all questions from Firestore\r\nexport async function getAllQuestions() {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, \"questions\"));\r\n    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  } catch (e) {\r\n    console.error(\"Error fetching questions: \", e);\r\n    return [];\r\n  }\r\n}\r\nexport default app;"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,8BAA8B;EAC1CC,WAAW,EAAE,kDAAkD;EAC/DC,SAAS,EAAE,cAAc;EACzBC,aAAa,EAAE,kCAAkC;EACjDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGb,aAAa,CAACI,cAAc,CAAC;AACzC,MAAMU,SAAS,GAAGb,YAAY,CAACY,GAAG,CAAC;;AAEnC;AACA,MAAME,IAAI,GAAGb,OAAO,CAACW,GAAG,CAAC;AACzB;AACA,MAAMG,EAAE,GAAGb,YAAY,CAACU,GAAG,CAAC;AAE5B,SAASE,IAAI;AACb,SAASC,EAAE;;AAEX;;AAEA;AACA,OAAO,eAAeC,WAAWA,CAACC,QAAQ,EAAE;EAC1C,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMC,MAAM,CAACC,UAAU,CAACL,EAAE,EAAE,WAAW,CAAC,EAAEE,QAAQ,CAAC;IAClE,OAAOC,MAAM,CAACG,EAAE;EAClB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,CAAC,CAAC;IAC3C,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,eAAeG,eAAeA,CAAA,EAAG;EACtC,IAAI;IACF,MAAMC,aAAa,GAAG,MAAMC,OAAO,CAACP,UAAU,CAACL,EAAE,EAAE,WAAW,CAAC,CAAC;IAChE,OAAOW,aAAa,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,KAAK;MAAET,EAAE,EAAES,GAAG,CAACT,EAAE;MAAE,GAAGS,GAAG,CAACC,IAAI,CAAC;IAAE,CAAC,CAAC,CAAC;EACvE,CAAC,CAAC,OAAOT,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEF,CAAC,CAAC;IAC9C,OAAO,EAAE;EACX;AACF;AACA,eAAeV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}